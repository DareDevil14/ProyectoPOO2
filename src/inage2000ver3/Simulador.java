package inage2000ver3;

import Lejos.SociedadAgentes;
import MaquinaVirtual.SueloCanvas;
import MaquinaVirtual.SueloInfo;
import java.io.*;
import java.util.Optional;
import java.awt.*;
import javax.swing.*;
import javax.swing.border.*;
import javafx.stage.FileChooser;
import java.awt.event.*;
import javafx.stage.Stage;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.event.EventHandler;
import javafx.scene.Cursor;
import javafx.scene.control.Alert;
import javafx.scene.control.ButtonType;
import javafx.scene.control.CheckMenuItem;
import javafx.scene.control.ContextMenu;
import javafx.scene.control.ScrollPane;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.MouseButton;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.StackPane;
import javafx.stage.Window;
import javax.swing.JFileChooser;

public class Simulador {

    private static Simulador simulator = null;        
    static final int NORTE = 1;
    static final int SUR = 2;
    static final int ESTE = 3;
    static final int OESTE = 4;

    ContextMenu popMenuOrientacion = new ContextMenu ();
    ContextMenu  popMenuRadial = new ContextMenu ();
    CheckMenuItem checkItem1 = new CheckMenuItem();
    CheckMenuItem checkItem2 = new CheckMenuItem();
    CheckMenuItem checkItem3 = new CheckMenuItem();
    CheckMenuItem checkItem4 = new CheckMenuItem();
    CheckMenuItem checkItemRadio1 = new CheckMenuItem();
      CheckMenuItem checkItemRadio2 = new CheckMenuItem();
    
    int PARED = 1;
    int OBSTACULO = 2;
    int LUZ = 3;
    int TEMPERATURA = 4;
    int AGENTE = 5;
    int ELIMINAR_CELDA = 6;
    int ELIMINAR_PARED = 7;

    //ImageIcon imgAge2000;
    String directorio;
    String nombreArchivo;
    String archivoMundo;
    MaquinaVirtual.SociedadAgentes sociedad;
    MaquinaVirtual.SueloCanvas suelo;
    MaquinaVirtual.SueloInfo info;

    int x, y, width, height, paso;
    int colocar, x_ini, y_ini, x_fin, y_fin, id_o;

    StackPane areaSuelo = new StackPane();
    ScrollPane scroll = new ScrollPane();
    
    private Simulador(){
        
    }

    public StackPane getPane() {
        return areaSuelo;
    }

    public static Simulador getInstanceOf() {
        if (simulator == null) {
            simulator = new Simulador();
            simulator.initComponents();
            try {
                simulator.jbInit();

            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return simulator;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        //imgAge2000 = new ImageIcon("imagen/age2000.gif");
//      directorio = "D:\\AAA-programas\\otros\\Sociedades\\";
        archivoMundo = "";
        directorio = "";
//      this.getContentPane().setLayout(null);
    }

    private void jbInit() throws Exception {
        x = 0; //coordenadas con respecto al frame (this.getGraphics)
        y = 0;
        paso = 20; //"paso", es la diferencia en pixeles entre un mosaico y otro .tamao de los cuadros del piso
        width = 300;
        height = 300;
        colocar = 0;

        suelo = new SueloCanvas(x, y, width, height, paso);
        registerCanvasListeners(suelo);
        areaSuelo.getChildren().add(suelo);        
        scroll.setContent(areaSuelo);
        
   
        
        areaSuelo.widthProperty().addListener(new ChangeListener<Number>() {
            @Override
            public void changed(ObservableValue<? extends Number> observable, Number oldValue, Number newValue) {
 
            }
        });
        areaSuelo.heightProperty().addListener(new ChangeListener<Number>() {
             @Override 
             public void changed(ObservableValue<? extends Number> observableValue, Number oldSceneHeight, Number newSceneHeight) {
                 
            }
        });
        
        

    }

    public void registerCanvasListeners(SueloCanvas canvas) {

        suelo.setOnKeyReleased(new EventHandler<KeyEvent>() {
            @Override
            public void handle(KeyEvent ke) {
                if (ke.getCode().isFunctionKey()) {// Cdigo del "ESC"
                    colocar = 0;
                    suelo.setCursor(Cursor.DEFAULT);
                }
            }
        });

        suelo.setOnMouseReleased(new EventHandler<MouseEvent>() {
           
            @Override
            public void handle(MouseEvent e) {
                 //System.out.println("Mouse releasesd :: " + MouseButton.SECONDARY + colocar);
             if( e.getButton() == MouseButton.SECONDARY ){ // botn DERECHO / BOTON 3
                 //System.out.println("Mouse button 3 releasesd :: ");
          id_o = suelo.isAgente((int)e.getX(),(int)e.getY());
          if(id_o!=-1){ // si existe Agente en esa celda
            checkOrientacion(suelo.getAgenteOrientacion(id_o));
            //popMenuOrientacion.show(popMenuOrientacion);
            popMenuOrientacion.show(suelo, e.getX(), e.getY());
          }
          x_fin = (int)e.getX();
          y_fin = (int)e.getY();
          if(suelo.isRadial(x_fin,y_fin)==13 || suelo.isRadial(x_fin,y_fin)==14){ // Si es temperatura o Luz
            checkRadio(suelo.getRadial(x_fin, y_fin));
           // suelo.add(popMenuRadial);
            popMenuRadial.show(suelo, e.getX(), e.getY());
          }
        }else{
                  
          switch (colocar) {
            case 1:
              x_fin = (int)e.getX();
              y_fin = (int)e.getY();
              suelo.setNvaPared(x_ini, y_ini, x_fin, y_fin);
              break;
            case 2:
              suelo.setNvoObstaculo((int)e.getX(),(int) e.getY());
              break;
            case 3:
              suelo.setNvaLuz((int)e.getX(),(int) e.getY());
              break;
            case 4:
              suelo.setNvaTemperatura((int)e.getX(), (int)e.getY());
              break;
            case 5:
              suelo.setAgenteXY(x_ini, (int)e.getX(), (int)e.getY());
              suelo.setCursor(Cursor.DEFAULT);
              suelo.limpiaTemporal();
              colocar = 0;
              break;
            case 6:
              suelo.quitarObjeto((int)e.getX(), (int)e.getY());
              break;
            case 7:
              suelo.quitarPared((int)e.getX(), (int)e.getY());
              break;
          }
        }
            }
        });

        suelo.setOnMousePressed(new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent event) {
                //System.out.println("Mouse pressed" + colocar);
                if ( event.getButton() != MouseButton.SECONDARY) { // botn DERECHO / BOTON 3
                    switch (colocar) {
                        case 1: // Guarda las coordenadas iniciales de una pared
                            x_ini = (int) event.getX();
                            y_ini = (int) event.getY();
                            break;
                    }
                    if (colocar == 0 && suelo.isAgente((int) event.getX(), (int) event.getY()) >= 0) { // Simulacin para re-colocar a un agente
                        x_ini = suelo.isAgente((int) event.getX(), (int) event.getY());
                        suelo.setCursor(Cursor.HAND);
                        colocar = AGENTE;
                    }
                }
            }
        });

        suelo.setOnMouseEntered(new EventHandler<MouseEvent>() {
          
            @Override
            public void handle(MouseEvent event) {
                //System.out.println("Mouse entered" + colocar);
                if (colocar == 0) {
                    suelo.setCursor(Cursor.DEFAULT);
                } else {
                    suelo.setCursor(Cursor.CROSSHAIR);
                }
            }
        });

        suelo.setOnMouseExited(new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent event) {
                //System.out.println("Mouse Exited" + colocar);
                if (colocar == 5) {
                    colocar = 0;
                    suelo.setCursor(Cursor.DEFAULT);
                    suelo.limpiaTemporal();
                }
            }
        });
        
         areaSuelo.sceneProperty().addListener((obs, oldScene, newScene) -> {
             
          /* System.out.println("Component is rendering now--------------") ;
            if(info == null) {
                 info = new SueloInfo(0, (int)suelo.getHeight(),
                                             (int) areaSuelo.getWidth() - 20,
                                              (int)areaSuelo.getHeight() - (int)suelo.getHeight() -
                                              20, 2);
                 areaSuelo.getChildren().add(info);
            } else {  
                info = null;
                info = new SueloInfo(0, (int)suelo.getHeight(),
                                              (int)areaSuelo.getWidth() - 20,
                                              (int)areaSuelo.getHeight() - (int)suelo.getHeight() -
                                              20, 2);
            }*/
            
            /* for(int i=0; i<sociedad.countAgentes(); i++){
                 info.setAgente(i, sociedad.getNombreAgente(i));
        }*/
        }
        );

    }

    private void checkRadio(int radio){
        switch (radio) {
          case 1:
            checkItemRadio1.setSelected(true);
            checkItemRadio2.setSelected(false);
            break;
          case 2:
            checkItemRadio1.setSelected(false);
            checkItemRadio2.setSelected(true);
            break;
        }
      }
    
    private void checkOrientacion(int or){
        checkItem1.setSelected(false);
        checkItem2.setSelected(false);
        checkItem3.setSelected(false);
        checkItem4.setSelected(false);
        switch(or){
          case NORTE:checkItem1.setSelected(true);
            break;
          case SUR:checkItem2.setSelected(true);
            break;
          case ESTE:checkItem3.setSelected(true);
            break;
          case OESTE:checkItem4.setSelected(true);
            break;
        }
      }
    public void abrirNuevoArcAge(String nombre, String direct) {
        nombreArchivo = nombre;
        directorio = direct;
        // FALTA QUIAR (NULL) SI EXISTA UNA SOCIEDAD PREVIA (LIBERAR MEMORIA)
        initSociedad();
        
            if(info == null) {
                 info = new SueloInfo(0, (int)suelo.getHeight(),
                                             (int) areaSuelo.getWidth() - 20,
                                              (int)areaSuelo.getHeight() - (int)suelo.getHeight() -
                                              20, 2);
                 areaSuelo.getChildren().add(info);
            } else {  
                info = null;
                info = new SueloInfo(0, (int)suelo.getHeight(),
                                              (int)areaSuelo.getWidth() - 20,
                                              (int)areaSuelo.getHeight() - (int)suelo.getHeight() -
                                              20, 2);
            }
            
           for(int i=0; i<sociedad.countAgentes(); i++){
                 info.setAgente(i, sociedad.getNombreAgente(i));
           }
    }

    private String getOnlyName(String archivo) {
        String e;
        int i = 0;
        i = archivo.lastIndexOf('.');
        if (i > 0 && i < archivo.length()) {
            e = archivo.substring(0, i);
            return e;
        } else {
            return archivo;
        }
    }

    public boolean existeArchivo(String ruta) {
        boolean band = false;
        BufferedReader in;
        try {
            in = new BufferedReader(
                    new InputStreamReader(
                            new FileInputStream(ruta)));
            band = true;
            try {
                in.close();
            } catch (IOException e) {
            } // "No cerr bien el archivo"
        } catch (IOException e) {
            band = false;// "No se abri bien el archivo fuente"
        } finally {
            return band;
        }
    }

    private boolean existeArchivoAbierto(String archivo) {
        if (archivo == directorio + nombreArchivo + ".age") {
            return true;
        }
        return false;
    }

    public void initSociedad() {
//    suelo.setDimensionhand(300,300); // CHECAR PENDIENTE PENDIENTE PENDIENTE
        sociedad = new MaquinaVirtual.SociedadAgentes(directorio, nombreArchivo, suelo);
        /*    info = new MaquinaVirtual.SueloInfo(0,suelo.getHeight(),this.getWidth()-20,this.getHeight()-suelo.getHeight()-20,sociedad.countAgentes());
    info.setVisible(true);
    areaSuelo.add(info, null); 
    for(int i=0; i<sociedad.countAgentes(); i++){
      info.setAgente(i, sociedad.getNombreAgente(i));
    }*/
    }

    public void startSociedadAgentes() {
        sociedad.startAgentes();
    }

    public void stopSociedadAgentes() {
        sociedad.stopAgentes();
    }

    public void suspendSociedadAgentes() {
        sociedad.suspendAgentes();
    }

    public void resumeSociedadAgentes() {
        sociedad.resumeAgentes();
    }

    public void nuevoMundo() {
        suelo.limpia();
    }

    public void abrirMundo() {        /*Alert alert = new Alert(Alert.AlertType.ERROR, "Add implementation for abrirMundo method in Simulador");
        Optional<ButtonType> result = alert.showAndWait();
        if (result.isPresent() && result.get() == ButtonType.OK) {
        }*/        
        File archivo = null;
        JFileChooser aux = new JFileChooser();
        aux.setAcceptAllFileFilterUsed(false);
        // Configura el directorio donde va a buscar los programas .mdo
        if(directorio != ""){
            File directory = new File(directorio);
            aux.setCurrentDirectory(directory);
        }
        // Configurar filtros "txt" y "mdo"
        ExampleFileFilter filter = new ExampleFileFilter("mdo", "Código objeto");
        aux.addChoosableFileFilter(filter);
        int valor=aux.showOpenDialog(null);
        if(valor==aux.APPROVE_OPTION){
            archivo = aux.getSelectedFile();
            directorio = archivo.getParent() + "\\";
            if (archivo.getPath()!=archivoMundo) {
                archivoMundo = archivo.getPath();
                suelo.abrirMundo(archivoMundo);
            }
            else {
                JOptionPane.showMessageDialog(null,
                                    "El archivo especificado ya se encuentra abierto",
                                    "Alerta",
                                    JOptionPane.INFORMATION_MESSAGE);
            }        
        }
    }

    public void guardarMundoComo() {
        /*Alert alert = new Alert(Alert.AlertType.ERROR, "Add implementation for guardarMundoComo method in Simulador");
        Optional<ButtonType> result = alert.showAndWait();
        if (result.isPresent() && result.get() == ButtonType.OK) {
        }
            */        
        /*
        File archivo = null;
        FileChooser fileChooser = new FileChooser();                 
        fileChooser.setTitle("Guardar mundo como:");                       
        
        //especificamos directorio
        if(directorio != ""){
            File directory = new File(directorio);
            fileChooser.setInitialDirectory(directory);
        }        
        
        // Agregar filtros para facilitar la busqueda
        FileChooser.ExtensionFilter extFilter = new FileChooser.ExtensionFilter("Mundo files (*.mdo)", "*.mdo");
        fileChooser.getExtensionFilters().add(extFilter);                                
               
        archivo = fileChooser.showSaveDialog(null);                      
        
        archivoMundo = suelo.guardarMundo(archivo.getPath());
        
        */
        
        File archivo = null;
        JFileChooser aux = new JFileChooser();
        aux.setDialogTitle("Guardar como...");
        // Especificar el directorio sobre el que se está trabajando
        if(directorio != ""){
            File directory = new File(directorio);
            aux.setCurrentDirectory(directory);
        }
        //    aux.setSelectedFile(new File(archivoMundo));
        // Especificar el filtro .age
        aux.setAcceptAllFileFilterUsed(false);
        ExampleFileFilter filter = new ExampleFileFilter("mdo", "Mundo");
        aux.addChoosableFileFilter(filter);
        int valor = aux.showSaveDialog(null);
        if(valor==JFileChooser.APPROVE_OPTION){
            archivo = aux.getSelectedFile();
            archivoMundo = suelo.guardarMundo(archivo.getPath());
        }
        
    }
    
    public void guardarMundo() {
        if (archivoMundo != "") {
            archivoMundo = suelo.guardarMundo(archivoMundo);
        } else {
            guardarMundoComo();
        }
    }

    void setPared() {
        colocar = PARED;
    }

    void setObstaculo() {
        colocar = OBSTACULO;
    }

    void setLuz() {
        colocar = LUZ;
    }

    void setTemperatura() {
        colocar = TEMPERATURA;
    }

    public int undo() {
        return suelo.undo();
    }

    public int redo() {
        return suelo.redo();
    }

    void quitarObjeto() {
        colocar = ELIMINAR_CELDA;
    }

    void quitarPared() {
        colocar = ELIMINAR_PARED;
    }

    public void finalize() {
        suelo = null;
        sociedad = null;
    }

}
